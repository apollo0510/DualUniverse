{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"OnPeriodic(true);","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"2"},{"code":"DoorTimeout = 5 --export: Time until door closes\n\n-- ***********************************************************\n\nlocal format          = string.format;\nlocal print           = system.print;\n\n-- ***********************************************************\n\nlocal unit_classes=\n{\n    CoreUnitDynamic  = { need = 1; meta = nil; },\n    ManualSwitchUnit = { need = 1; meta = nil; },\n    DoorUnit         = { need = 1; meta = { __index={ status=-1; time=0.0; } }; },\n    LightUnit        = { need = 1; meta = nil; },\n    ForceFieldUnit   = { need = 0; meta = nil; },\n};\n\n-- ***********************************************************\n\nfunction IdentifySlots()\n    local u = unit_classes;\n    for key,obj in pairs(unit) do\n        if (type(obj)==\"table\") and (obj.getClass~=nil) then\n            local class = obj.getClass();\n            local class_table = u[class];\n            if class_table then\n                 local unit = {};\n                 unit.obj=obj; \n                 setmetatable(unit,class_table.meta);\n                 class_table[#class_table+1]=unit; \n             else if class~=\"Generic\" then\n               \tprint(format(\"Unexpected unit class %s\",class));\n             end    \n           end    \n        end    \n    end    \n    local all_units_found=true;\n    for class_name,class_table in pairs(u) do\n        local n = #class_table;\n        if n < class_table.need then\n            all_units_found=false;\n            print(format(\"Missing unit type %s : %d of %d\",class_name,n,class_table.need));\n        end    \n    end    \n    return all_units_found;\nend\n\n-- ***********************************************************\nlocal last_door_open=-1;\nlocal last_enable_force_field=-1;\n\nfunction OnPeriodic(shutdown)\n    local t  = system.getArkTime();\n    \n    local u  = unit_classes;\n    local core        = u.CoreUnitDynamic[1].obj;\n    local switch_door = u.ManualSwitchUnit[1].obj;\n    local led_doors   = u.LightUnit[1].obj;\n    local doors       = u.DoorUnit;\n    \n    local v_velo = vec3(construct.getVelocity());\n    local speed  = v_velo:len();\n    local kmh    = speed * 3.6;\n    \n    local door_open = false; \n    local door_switch = switch_door.isActive();\n    \n    if kmh >= 10.0 then\n \t    if kmh >= 55.0 and door_switch == 1 then\n            door_switch = 0;\n            switch_door.deactivate();\n             print(\"Auto closing doors inflight\");\n        end \n \t    if kmh <= 45.0 and door_switch == 0 then\n            door_switch = 1;\n            switch_door.activate();\n            print(\"Auto opening doors for landing\");\n        end \n    end\n    \n\tfor i=1,#doors do\n     \tlocal door=doors[i];\n         if door.obj then\n         \tlocal s=door.obj.isOpen();\n             if s~=door.status then\n             \tdoor.status=s;\n                 door.time=t;\n             end\n             if door_switch == 1 then\n             \tif s == 1 then\n                 \tdoor_open = true;\n                 else   \n                 \tdoor.obj.open();   \n                 end    \n             else   \n             \tif s == 1 then\n                     local delta = t - door.time;\n                     if (delta>DoorTimeout) or shutdown then\n                     \tdoor.obj.close();  \n                     else\n\t                    door_open = true;\n                     end    \n                 end    \n             end   \n         end   \n     end     \n    \n     if door_open ~= last_door_open then\n     \tlast_door_open = door_open;\n         if door_open then \n     \t    led_doors.activate();\n             led_doors.setColor(255,0,0);\n         else              \n             led_doors.activate(); \n             led_doors.setColor(0,255,0);\n         end    \n\tend   \n    \n     local enable_force_field = (kmh < 10.0) and ((door_switch==1) or door_open);\n     if enable_force_field ~= last_enable_force_field then\n        last_enable_force_field = enable_force_field;\n        local force_fields      = u.ForceFieldUnit;\n        local n = #force_fields;\n        if n>0 then\n            for i=1,n do\n                local force_field=force_fields[i];\n                  if enable_force_field then\n                      force_field.obj.deploy();\n                  else  \n                      force_field.obj.retract();\n                  end  \n            end \n            if enable_force_field then\n                print(\"Deploying force fields\");\n            else\n                print(\"Retracting force fields\");\n            end    \n        end\n     end   \n    \nend\n\n-- ***********************************************************\n\n\nif IdentifySlots() then\n   print(\"Starting Door Control\"); \n   unit.setTimer(\"Periodic\",1.0);\nend    \n\n\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"3"},{"code":"OnPeriodic(false);","filter":{"args":[{"value":"Periodic"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":4}],"methods":[],"events":[]}